name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: '<aks_cluster_name>'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: '<resource_group_name>'
      aks_acr_name:
        description: 'Name of ACR'
        required: true
        default: '<acr_name>'
    
  workflow_call:
    inputs:
      aks_cluster_name:
        required: true
        type: string
      aks_resource_group:
        required: true
        type: string
      aks_acr_name:
        required: true
        type: string
      aks_storage_name:
        required: true
        type: string
      aks_namespace:
        required: true
        type: string
    secrets:
      AZURE_CREDENTIALS:
        required: true
    outputs:
      PRODUCT_API_IP:
        description: 'Product Service IP'
        value: ${{ jobs.deploy_backend.outputs.PRODUCT_API_IP }}
      ORDER_API_IP:
        description: 'Order Service IP'
        value: ${{ jobs.deploy_backend.outputs.ORDER_API_IP }}
      CUSTOMER_API_IP:
        description: 'Customer Service IP'
        value: ${{ jobs.deploy_backend.outputs.CUSTOMER_API_IP }}

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production
    
    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.external_ip }}
      CUSTOMER_API_IP: ${{ steps.get_customer_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials --resource-group ${{ inputs.aks_resource_group || github.event.inputs.aks_resource_group }} --name ${{ inputs.aks_cluster_name || github.event.inputs.aks_cluster_name }} --overwrite-existing

      # - name: Attach ACR
      #   run: |
      #     az aks update --name ${{ inputs.aks_cluster_name || github.event.inputs.aks_cluster_name }} --resource-group ${{ inputs.aks_resource_group || github.event.inputs.aks_resource_group }} --attach-acr ${{ inputs.aks_acr_name || github.event.inputs.aks_acr_name }}

      - name: Get Azure Storage Account Credentials
        run: |
          RAW_KEY=$(az storage account keys list \
            --account-name ${{ inputs.aks_storage_name || github.event.inputs.aks_storage_name }} \
            --resource-group ${{ inputs.aks_resource_group || github.event.inputs.aks_resource_group }} \
            --query "[0].value" -o tsv)

          BASE64_NAME=$(echo -n "${{ inputs.aks_storage_name || github.event.inputs.aks_storage_name }}" | base64 -w0)
          BASE64_KEY=$(echo -n "$RAW_KEY" | base64 -w0)

          echo "BASE64_NAME=$BASE64_NAME" >> $GITHUB_ENV
          echo "BASE64_KEY=$BASE64_KEY" >> $GITHUB_ENV
    
      - name: Inject Container Secrets Into Manifest Files
        run: |
            sed -i "s|_AZURE_STORAGE_ACCOUNT_NAME_|${{ env.BASE64_NAME }}|g" k8s/secrets.yaml
            sed -i "s|_AZURE_STORAGE_ACCOUNT_KEY_|${{ env.BASE64_KEY }}|g" k8s/secrets.yaml
      
      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          echo "Deploying backend infrastructure..."
          cd k8s/
          kubectl apply -f configmaps.yaml --namespace=${{ inputs.aks_namespace }}
          kubectl apply -f secrets.yaml --namespace=${{ inputs.aks_namespace }}
          kubectl apply -f customer-db.yaml --namespace=${{ inputs.aks_namespace }}
          kubectl apply -f product-db.yaml --namespace=${{ inputs.aks_namespace }}
          kubectl apply -f order-db.yaml --namespace=${{ inputs.aks_namespace }}

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          echo "Deploying backend microservices..."
          cd k8s/
          kubectl apply -f customer-service.yaml --namespace=${{ inputs.aks_namespace }}
          kubectl apply -f product-service.yaml --namespace=${{ inputs.aks_namespace }}
          kubectl apply -f order-service.yaml --namespace=${{ inputs.aks_namespace }}
      
      - name: Wait for Backend LoadBalancer IPs
        env:
          NAMESPACE: staging                # set to the namespace you applied to
          SERVICES: "product-service-w05-aks order-service-w05-aks customer-service-w05-aks"
          TIMEOUT_SECS: "600"
          SLEEP_SECS: "5"
        run: |
          set -u  # do NOT set -e so a transient kubectl error doesn't abort the loop

          echo "Waiting for LoadBalancer IPs in namespace ${NAMESPACE}"
          deadline=$(( $(date +%s) + TIMEOUT_SECS ))

          get_ip () {
            local name="$1"
            kubectl -n "${NAMESPACE}" get svc "${name}" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true
          }

          for svc in ${SERVICES}; do
            echo "→ ${svc}"
            while true; do
              ip="$(get_ip "${svc}")"
              if [ -n "${ip}" ]; then
                echo "✓ ${svc} => ${ip}"
                # export to env for later steps
                var=$(echo "${svc}" | tr '-' '_' | tr '[:lower:]' '[:upper:]')_IP
                echo "${var}=${ip}" >> "$GITHUB_ENV"
                break
              fi
              if [ "$(date +%s)" -ge "${deadline}" ]; then
                echo "✗ Timed out waiting for ${svc}"
                kubectl -n "${NAMESPACE}" get svc -o wide || true
                exit 1
              fi
              sleep "${SLEEP_SECS}"
            done
          done

          echo "All backend service IPs discovered."

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT
      
      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT
      
      - name: Capture Customer Service IP for Workflow Output
        id: get_customer_ip
        run: echo "external_ip=${{ env.CUSTOMER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout from Azure
        run: az logout